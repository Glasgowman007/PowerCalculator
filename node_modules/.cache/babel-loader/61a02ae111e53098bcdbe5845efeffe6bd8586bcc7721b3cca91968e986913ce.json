{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barri\\\\Desktop\\\\Websites\\\\Power\\\\power-calc\\\\src\\\\ScrollReveal.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useMemo } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport './ScrollReveal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(ScrollTrigger);\nconst ScrollReveal = ({\n  children,\n  scrollContainerRef,\n  enableBlur = true,\n  baseOpacity = 0.1,\n  baseRotation = 3,\n  blurStrength = 4,\n  containerClassName = \"\",\n  textClassName = \"\",\n  rotationEnd = \"bottom bottom\",\n  wordAnimationEnd = \"bottom bottom\"\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const isString = typeof children === 'string';\n  const splitText = useMemo(() => {\n    if (!isString) return null;\n    const text = children;\n    return text.split(/(\\s+)/).map((word, index) => {\n      if (word.match(/^\\s+$/)) return word;\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"word\",\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this);\n    });\n  }, [children, isString]);\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n    const scroller = scrollContainerRef && scrollContainerRef.current ? scrollContainerRef.current : window;\n    if (!isString) {\n      // Animate the whole block for non-string children (e.g., results card)\n      gsap.fromTo(el, {\n        opacity: 0,\n        y: 40\n      }, {\n        opacity: 1,\n        y: 0,\n        duration: 1,\n        ease: 'power2.out',\n        scrollTrigger: {\n          trigger: el,\n          scroller,\n          start: 'top 80%',\n          end: 'bottom 60%',\n          toggleActions: 'play none none reverse'\n        }\n      });\n    } else {\n      // Animate words for string children\n      gsap.fromTo(el, {\n        transformOrigin: '0% 50%',\n        rotate: baseRotation\n      }, {\n        ease: 'none',\n        rotate: 0,\n        scrollTrigger: {\n          trigger: el,\n          scroller,\n          start: 'top bottom',\n          end: rotationEnd,\n          scrub: true\n        }\n      });\n      const wordElements = el.querySelectorAll('.word');\n      gsap.fromTo(wordElements, {\n        opacity: baseOpacity,\n        willChange: 'opacity'\n      }, {\n        ease: 'none',\n        opacity: 1,\n        stagger: 0.05,\n        scrollTrigger: {\n          trigger: el,\n          scroller,\n          start: 'top bottom-=20%',\n          end: wordAnimationEnd,\n          scrub: true\n        }\n      });\n      if (enableBlur) {\n        gsap.fromTo(wordElements, {\n          filter: `blur(${blurStrength}px)`\n        }, {\n          ease: 'none',\n          filter: 'blur(0px)',\n          stagger: 0.05,\n          scrollTrigger: {\n            trigger: el,\n            scroller,\n            start: 'top bottom-=20%',\n            end: wordAnimationEnd,\n            scrub: true\n          }\n        });\n      }\n    }\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, [scrollContainerRef, enableBlur, baseRotation, baseOpacity, rotationEnd, wordAnimationEnd, blurStrength, isString]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `scroll-reveal ${containerClassName}`,\n    children: isString ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `scroll-reveal-text ${textClassName}`,\n      children: splitText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollReveal, \"hIZrZL5u/LWmVxtB2uNEyPh5EJc=\");\n_c = ScrollReveal;\nexport default ScrollReveal;\nvar _c;\n$RefreshReg$(_c, \"ScrollReveal\");","map":{"version":3,"names":["useEffect","useRef","useMemo","gsap","ScrollTrigger","jsxDEV","_jsxDEV","registerPlugin","ScrollReveal","children","scrollContainerRef","enableBlur","baseOpacity","baseRotation","blurStrength","containerClassName","textClassName","rotationEnd","wordAnimationEnd","_s","containerRef","isString","splitText","text","split","map","word","index","match","className","fileName","_jsxFileName","lineNumber","columnNumber","el","current","scroller","window","fromTo","opacity","y","duration","ease","scrollTrigger","trigger","start","end","toggleActions","transformOrigin","rotate","scrub","wordElements","querySelectorAll","willChange","stagger","filter","getAll","forEach","kill","ref","_c","$RefreshReg$"],"sources":["C:/Users/barri/Desktop/Websites/Power/power-calc/src/ScrollReveal.js"],"sourcesContent":["import { useEffect, useRef, useMemo } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\r\n\r\nimport './ScrollReveal.css';\r\n\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nconst ScrollReveal = ({\r\n  children,\r\n  scrollContainerRef,\r\n  enableBlur = true,\r\n  baseOpacity = 0.1,\r\n  baseRotation = 3,\r\n  blurStrength = 4,\r\n  containerClassName = \"\",\r\n  textClassName = \"\",\r\n  rotationEnd = \"bottom bottom\",\r\n  wordAnimationEnd = \"bottom bottom\"\r\n}) => {\r\n  const containerRef = useRef(null);\r\n\r\n  const isString = typeof children === 'string';\r\n  const splitText = useMemo(() => {\r\n    if (!isString) return null;\r\n    const text = children;\r\n    return text.split(/(\\s+)/).map((word, index) => {\r\n      if (word.match(/^\\s+$/)) return word;\r\n      return (\r\n        <span className=\"word\" key={index}>\r\n          {word}\r\n        </span>\r\n      );\r\n    });\r\n  }, [children, isString]);\r\n\r\n  useEffect(() => {\r\n    const el = containerRef.current;\r\n    if (!el) return;\r\n\r\n    const scroller =\r\n      scrollContainerRef && scrollContainerRef.current\r\n        ? scrollContainerRef.current\r\n        : window;\r\n\r\n    if (!isString) {\r\n      // Animate the whole block for non-string children (e.g., results card)\r\n      gsap.fromTo(\r\n        el,\r\n        { opacity: 0, y: 40 },\r\n        {\r\n          opacity: 1,\r\n          y: 0,\r\n          duration: 1,\r\n          ease: 'power2.out',\r\n          scrollTrigger: {\r\n            trigger: el,\r\n            scroller,\r\n            start: 'top 80%',\r\n            end: 'bottom 60%',\r\n            toggleActions: 'play none none reverse',\r\n          },\r\n        }\r\n      );\r\n    } else {\r\n      // Animate words for string children\r\n      gsap.fromTo(\r\n        el,\r\n        { transformOrigin: '0% 50%', rotate: baseRotation },\r\n        {\r\n          ease: 'none',\r\n          rotate: 0,\r\n          scrollTrigger: {\r\n            trigger: el,\r\n            scroller,\r\n            start: 'top bottom',\r\n            end: rotationEnd,\r\n            scrub: true,\r\n          },\r\n        }\r\n      );\r\n      const wordElements = el.querySelectorAll('.word');\r\n      gsap.fromTo(\r\n        wordElements,\r\n        { opacity: baseOpacity, willChange: 'opacity' },\r\n        {\r\n          ease: 'none',\r\n          opacity: 1,\r\n          stagger: 0.05,\r\n          scrollTrigger: {\r\n            trigger: el,\r\n            scroller,\r\n            start: 'top bottom-=20%',\r\n            end: wordAnimationEnd,\r\n            scrub: true,\r\n          },\r\n        }\r\n      );\r\n      if (enableBlur) {\r\n        gsap.fromTo(\r\n          wordElements,\r\n          { filter: `blur(${blurStrength}px)` },\r\n          {\r\n            ease: 'none',\r\n            filter: 'blur(0px)',\r\n            stagger: 0.05,\r\n            scrollTrigger: {\r\n              trigger: el,\r\n              scroller,\r\n              start: 'top bottom-=20%',\r\n              end: wordAnimationEnd,\r\n              scrub: true,\r\n            },\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\r\n    };\r\n  }, [scrollContainerRef, enableBlur, baseRotation, baseOpacity, rotationEnd, wordAnimationEnd, blurStrength, isString]);\r\n\r\n  return (\r\n    <div ref={containerRef} className={`scroll-reveal ${containerClassName}`}>\r\n      {isString ? (\r\n        <p className={`scroll-reveal-text ${textClassName}`}>{splitText}</p>\r\n      ) : (\r\n        children\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollReveal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}