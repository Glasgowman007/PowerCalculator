{"ast":null,"code":"import{useEffect,useRef,useMemo}from'react';import{gsap}from'gsap';import{ScrollTrigger}from'gsap/ScrollTrigger';import'./ScrollReveal.css';import{jsx as _jsx}from\"react/jsx-runtime\";gsap.registerPlugin(ScrollTrigger);const ScrollReveal=_ref=>{let{children,scrollContainerRef,enableBlur=true,baseOpacity=0,baseRotation=5,blurStrength=10,containerClassName=\"\",textClassName=\"\",rotationEnd=\"bottom bottom\",wordAnimationEnd=\"bottom bottom\"}=_ref;const containerRef=useRef(null);const isString=typeof children==='string';const splitText=useMemo(()=>{if(!isString)return null;const text=children;return text.split(/(\\s+)/).map((word,index)=>{if(word.match(/^\\s+$/))return word;return/*#__PURE__*/_jsx(\"span\",{className:\"word\",children:word},index);});},[children,isString]);useEffect(()=>{const el=containerRef.current;if(!el)return;const scroller=scrollContainerRef&&scrollContainerRef.current?scrollContainerRef.current:window;if(!isString){// Animate the whole block for non-string children (e.g., results card)\ngsap.fromTo(el,{opacity:0,y:40},{opacity:1,y:0,duration:1,ease:'power2.out',scrollTrigger:{trigger:el,scroller,start:'top 80%',end:'bottom 60%',toggleActions:'play none none reverse'}});}else{// Animate words for string children\ngsap.fromTo(el,{transformOrigin:'0% 50%',rotate:baseRotation},{ease:'none',rotate:0,scrollTrigger:{trigger:el,scroller,start:'top bottom',end:rotationEnd,scrub:true}});const wordElements=el.querySelectorAll('.word');gsap.fromTo(wordElements,{opacity:baseOpacity,willChange:'opacity'},{ease:'none',opacity:1,stagger:0.05,scrollTrigger:{trigger:el,scroller,start:'top bottom-=20%',end:wordAnimationEnd,scrub:true}});if(enableBlur){gsap.fromTo(wordElements,{filter:\"blur(\".concat(blurStrength,\"px)\")},{ease:'none',filter:'blur(0px)',stagger:0.05,scrollTrigger:{trigger:el,scroller,start:'top bottom-=20%',end:wordAnimationEnd,scrub:true}});}}return()=>{ScrollTrigger.getAll().forEach(trigger=>trigger.kill());};},[scrollContainerRef,enableBlur,baseRotation,baseOpacity,rotationEnd,wordAnimationEnd,blurStrength,isString]);return/*#__PURE__*/_jsx(\"div\",{ref:containerRef,className:\"scroll-reveal \".concat(containerClassName),children:isString?/*#__PURE__*/_jsx(\"p\",{className:\"scroll-reveal-text \".concat(textClassName),children:splitText}):children});};export default ScrollReveal;","map":{"version":3,"names":["useEffect","useRef","useMemo","gsap","ScrollTrigger","jsx","_jsx","registerPlugin","ScrollReveal","_ref","children","scrollContainerRef","enableBlur","baseOpacity","baseRotation","blurStrength","containerClassName","textClassName","rotationEnd","wordAnimationEnd","containerRef","isString","splitText","text","split","map","word","index","match","className","el","current","scroller","window","fromTo","opacity","y","duration","ease","scrollTrigger","trigger","start","end","toggleActions","transformOrigin","rotate","scrub","wordElements","querySelectorAll","willChange","stagger","filter","concat","getAll","forEach","kill","ref"],"sources":["C:/Users/barri/Desktop/Websites/Power/power-calc/src/ScrollReveal.js"],"sourcesContent":["import { useEffect, useRef, useMemo } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nimport './ScrollReveal.css';\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst ScrollReveal = ({\n  children,\n  scrollContainerRef,\n  enableBlur = true,\n  baseOpacity = 0,\n  baseRotation = 5,\n  blurStrength = 10,\n  containerClassName = \"\",\n  textClassName = \"\",\n  rotationEnd = \"bottom bottom\",\n  wordAnimationEnd = \"bottom bottom\"\n}) => {\n  const containerRef = useRef(null);\n\n  const isString = typeof children === 'string';\n  const splitText = useMemo(() => {\n    if (!isString) return null;\n    const text = children;\n    return text.split(/(\\s+)/).map((word, index) => {\n      if (word.match(/^\\s+$/)) return word;\n      return (\n        <span className=\"word\" key={index}>\n          {word}\n        </span>\n      );\n    });\n  }, [children, isString]);\n\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n\n    const scroller =\n      scrollContainerRef && scrollContainerRef.current\n        ? scrollContainerRef.current\n        : window;\n\n    if (!isString) {\n      // Animate the whole block for non-string children (e.g., results card)\n      gsap.fromTo(\n        el,\n        { opacity: 0, y: 40 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 1,\n          ease: 'power2.out',\n          scrollTrigger: {\n            trigger: el,\n            scroller,\n            start: 'top 80%',\n            end: 'bottom 60%',\n            toggleActions: 'play none none reverse',\n          },\n        }\n      );\n    } else {\n      // Animate words for string children\n      gsap.fromTo(\n        el,\n        { transformOrigin: '0% 50%', rotate: baseRotation },\n        {\n          ease: 'none',\n          rotate: 0,\n          scrollTrigger: {\n            trigger: el,\n            scroller,\n            start: 'top bottom',\n            end: rotationEnd,\n            scrub: true,\n          },\n        }\n      );\n      const wordElements = el.querySelectorAll('.word');\n      gsap.fromTo(\n        wordElements,\n        { opacity: baseOpacity, willChange: 'opacity' },\n        {\n          ease: 'none',\n          opacity: 1,\n          stagger: 0.05,\n          scrollTrigger: {\n            trigger: el,\n            scroller,\n            start: 'top bottom-=20%',\n            end: wordAnimationEnd,\n            scrub: true,\n          },\n        }\n      );\n      if (enableBlur) {\n        gsap.fromTo(\n          wordElements,\n          { filter: `blur(${blurStrength}px)` },\n          {\n            ease: 'none',\n            filter: 'blur(0px)',\n            stagger: 0.05,\n            scrollTrigger: {\n              trigger: el,\n              scroller,\n              start: 'top bottom-=20%',\n              end: wordAnimationEnd,\n              scrub: true,\n            },\n          }\n        );\n      }\n    }\n\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, [scrollContainerRef, enableBlur, baseRotation, baseOpacity, rotationEnd, wordAnimationEnd, blurStrength, isString]);\n\n  return (\n    <div ref={containerRef} className={`scroll-reveal ${containerClassName}`}>\n      {isString ? (\n        <p className={`scroll-reveal-text ${textClassName}`}>{splitText}</p>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\nexport default ScrollReveal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}