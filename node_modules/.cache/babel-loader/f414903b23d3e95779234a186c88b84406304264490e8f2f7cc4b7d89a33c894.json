{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\barri\\\\Desktop\\\\Websites\\\\Power\\\\power-calc\\\\src\\\\RotatingText.js\",\n  _s = $RefreshSig$();\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction cn(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\nconst RotatingText = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    texts,\n    transition = {\n      type: \"spring\",\n      damping: 25,\n      stiffness: 300\n    },\n    initial = {\n      y: \"100%\",\n      opacity: 0\n    },\n    animate = {\n      y: 0,\n      opacity: 1\n    },\n    exit = {\n      y: \"-120%\",\n      opacity: 0\n    },\n    animatePresenceMode = \"wait\",\n    animatePresenceInitial = false,\n    rotationInterval = 2000,\n    staggerDuration = 0,\n    staggerFrom = \"first\",\n    loop = true,\n    auto = true,\n    splitBy = \"characters\",\n    onNext,\n    mainClassName,\n    splitLevelClassName,\n    elementLevelClassName,\n    ...rest\n  } = props;\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const splitIntoCharacters = text => {\n    if (typeof Intl !== \"undefined\" && Intl.Segmenter) {\n      const segmenter = new Intl.Segmenter(\"en\", {\n        granularity: \"grapheme\"\n      });\n      return Array.from(segmenter.segment(text), segment => segment.segment);\n    }\n    return Array.from(text);\n  };\n  const elements = useMemo(() => {\n    const currentText = texts[currentTextIndex];\n    if (splitBy === \"characters\") {\n      const words = currentText.split(\" \");\n      return words.map((word, i) => ({\n        characters: splitIntoCharacters(word),\n        needsSpace: i !== words.length - 1\n      }));\n    }\n    if (splitBy === \"words\") {\n      return currentText.split(\" \").map((word, i, arr) => ({\n        characters: [word],\n        needsSpace: i !== arr.length - 1\n      }));\n    }\n    if (splitBy === \"lines\") {\n      return currentText.split(\"\\n\").map((line, i, arr) => ({\n        characters: [line],\n        needsSpace: i !== arr.length - 1\n      }));\n    }\n    return currentText.split(splitBy).map((part, i, arr) => ({\n      characters: [part],\n      needsSpace: i !== arr.length - 1\n    }));\n  }, [texts, currentTextIndex, splitBy]);\n  const getStaggerDelay = useCallback((index, totalChars) => {\n    const total = totalChars;\n    if (staggerFrom === \"first\") return index * staggerDuration;\n    if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration;\n    if (staggerFrom === \"center\") {\n      const center = Math.floor(total / 2);\n      return Math.abs(center - index) * staggerDuration;\n    }\n    if (staggerFrom === \"random\") {\n      const randomIndex = Math.floor(Math.random() * total);\n      return Math.abs(randomIndex - index) * staggerDuration;\n    }\n    return Math.abs(staggerFrom - index) * staggerDuration;\n  }, [staggerFrom, staggerDuration]);\n  const handleIndexChange = useCallback(newIndex => {\n    setCurrentTextIndex(newIndex);\n    if (onNext) onNext(newIndex);\n  }, [onNext]);\n  const next = useCallback(() => {\n    const nextIndex = currentTextIndex === texts.length - 1 ? loop ? 0 : currentTextIndex : currentTextIndex + 1;\n    if (nextIndex !== currentTextIndex) {\n      handleIndexChange(nextIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n  const previous = useCallback(() => {\n    const prevIndex = currentTextIndex === 0 ? loop ? texts.length - 1 : currentTextIndex : currentTextIndex - 1;\n    if (prevIndex !== currentTextIndex) {\n      handleIndexChange(prevIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n  const jumpTo = useCallback(index => {\n    const validIndex = Math.max(0, Math.min(index, texts.length - 1));\n    if (validIndex !== currentTextIndex) {\n      handleIndexChange(validIndex);\n    }\n  }, [texts.length, currentTextIndex, handleIndexChange]);\n  const reset = useCallback(() => {\n    if (currentTextIndex !== 0) {\n      handleIndexChange(0);\n    }\n  }, [currentTextIndex, handleIndexChange]);\n  useImperativeHandle(ref, () => ({\n    next,\n    previous,\n    jumpTo,\n    reset\n  }), [next, previous, jumpTo, reset]);\n  useEffect(() => {\n    if (!auto) return;\n    const intervalId = setInterval(next, rotationInterval);\n    return () => clearInterval(intervalId);\n  }, [next, rotationInterval, auto]);\n  return /*#__PURE__*/_jsxDEV(motion.span, {\n    className: cn(\"flex flex-wrap whitespace-pre-wrap relative\", mainClassName),\n    ...rest,\n    layout: true,\n    transition: transition,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sr-only\",\n      children: texts[currentTextIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      mode: animatePresenceMode,\n      initial: animatePresenceInitial,\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: cn(splitBy === \"lines\" ? \"flex flex-col w-full\" : \"flex flex-wrap whitespace-pre-wrap relative\"),\n        layout: true,\n        \"aria-hidden\": \"true\",\n        children: elements.map((wordObj, wordIndex, array) => {\n          const previousCharsCount = array.slice(0, wordIndex).reduce((sum, word) => sum + word.characters.length, 0);\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cn(\"inline-flex\", splitLevelClassName),\n            children: [wordObj.characters.map((char, charIndex) => /*#__PURE__*/_jsxDEV(motion.span, {\n              initial: initial,\n              animate: animate,\n              exit: exit,\n              transition: {\n                ...transition,\n                delay: getStaggerDelay(previousCharsCount + charIndex, array.reduce((sum, word) => sum + word.characters.length, 0))\n              },\n              className: cn(\"inline-block\", elementLevelClassName),\n              children: char\n            }, charIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this)), wordObj.needsSpace && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"whitespace-pre\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 40\n            }, this)]\n          }, wordIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this);\n        })\n      }, currentTextIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}, \"igc7VDShIH5ExhXYZmXUH3baqwE=\")), \"igc7VDShIH5ExhXYZmXUH3baqwE=\");\n_c2 = RotatingText;\nRotatingText.displayName = \"RotatingText\";\nexport default RotatingText;\nvar _c, _c2;\n$RefreshReg$(_c, \"RotatingText$forwardRef\");\n$RefreshReg$(_c2, \"RotatingText\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","forwardRef","useCallback","useEffect","useImperativeHandle","useMemo","useState","motion","AnimatePresence","jsxDEV","_jsxDEV","cn","classes","filter","Boolean","join","RotatingText","_c","props","ref","texts","transition","type","damping","stiffness","initial","y","opacity","animate","exit","animatePresenceMode","animatePresenceInitial","rotationInterval","staggerDuration","staggerFrom","loop","auto","splitBy","onNext","mainClassName","splitLevelClassName","elementLevelClassName","rest","currentTextIndex","setCurrentTextIndex","splitIntoCharacters","text","Intl","Segmenter","segmenter","granularity","Array","from","segment","elements","currentText","words","split","map","word","i","characters","needsSpace","length","arr","line","part","getStaggerDelay","index","totalChars","total","center","Math","floor","abs","randomIndex","random","handleIndexChange","newIndex","next","nextIndex","previous","prevIndex","jumpTo","validIndex","max","min","reset","intervalId","setInterval","clearInterval","span","className","layout","children","fileName","lineNumber","columnNumber","mode","div","wordObj","wordIndex","array","previousCharsCount","slice","reduce","sum","char","charIndex","delay","_c2","displayName","$RefreshReg$"],"sources":["C:/Users/barri/Desktop/Websites/Power/power-calc/src/RotatingText.js"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  forwardRef,\r\n  useCallback,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\nfunction cn(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nconst RotatingText = forwardRef((props, ref) => {\r\n  const {\r\n    texts,\r\n    transition = { type: \"spring\", damping: 25, stiffness: 300 },\r\n    initial = { y: \"100%\", opacity: 0 },\r\n    animate = { y: 0, opacity: 1 },\r\n    exit = { y: \"-120%\", opacity: 0 },\r\n    animatePresenceMode = \"wait\",\r\n    animatePresenceInitial = false,\r\n    rotationInterval = 2000,\r\n    staggerDuration = 0,\r\n    staggerFrom = \"first\",\r\n    loop = true,\r\n    auto = true,\r\n    splitBy = \"characters\",\r\n    onNext,\r\n    mainClassName,\r\n    splitLevelClassName,\r\n    elementLevelClassName,\r\n    ...rest\r\n  } = props;\r\n\r\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n\r\n  const splitIntoCharacters = (text) => {\r\n    if (typeof Intl !== \"undefined\" && Intl.Segmenter) {\r\n      const segmenter = new Intl.Segmenter(\"en\", { granularity: \"grapheme\" });\r\n      return Array.from(segmenter.segment(text), (segment) => segment.segment);\r\n    }\r\n    return Array.from(text);\r\n  };\r\n\r\n  const elements = useMemo(() => {\r\n    const currentText = texts[currentTextIndex];\r\n    if (splitBy === \"characters\") {\r\n      const words = currentText.split(\" \");\r\n      return words.map((word, i) => ({\r\n        characters: splitIntoCharacters(word),\r\n        needsSpace: i !== words.length - 1,\r\n      }));\r\n    }\r\n    if (splitBy === \"words\") {\r\n      return currentText.split(\" \").map((word, i, arr) => ({\r\n        characters: [word],\r\n        needsSpace: i !== arr.length - 1,\r\n      }));\r\n    }\r\n    if (splitBy === \"lines\") {\r\n      return currentText.split(\"\\n\").map((line, i, arr) => ({\r\n        characters: [line],\r\n        needsSpace: i !== arr.length - 1,\r\n      }));\r\n    }\r\n\r\n    return currentText.split(splitBy).map((part, i, arr) => ({\r\n      characters: [part],\r\n      needsSpace: i !== arr.length - 1,\r\n    }));\r\n  }, [texts, currentTextIndex, splitBy]);\r\n\r\n  const getStaggerDelay = useCallback(\r\n    (index, totalChars) => {\r\n      const total = totalChars;\r\n      if (staggerFrom === \"first\") return index * staggerDuration;\r\n      if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration;\r\n      if (staggerFrom === \"center\") {\r\n        const center = Math.floor(total / 2);\r\n        return Math.abs(center - index) * staggerDuration;\r\n      }\r\n      if (staggerFrom === \"random\") {\r\n        const randomIndex = Math.floor(Math.random() * total);\r\n        return Math.abs(randomIndex - index) * staggerDuration;\r\n      }\r\n      return Math.abs(staggerFrom - index) * staggerDuration;\r\n    },\r\n    [staggerFrom, staggerDuration]\r\n  );\r\n\r\n  const handleIndexChange = useCallback(\r\n    (newIndex) => {\r\n      setCurrentTextIndex(newIndex);\r\n      if (onNext) onNext(newIndex);\r\n    },\r\n    [onNext]\r\n  );\r\n\r\n  const next = useCallback(() => {\r\n    const nextIndex =\r\n      currentTextIndex === texts.length - 1\r\n        ? loop\r\n          ? 0\r\n          : currentTextIndex\r\n        : currentTextIndex + 1;\r\n    if (nextIndex !== currentTextIndex) {\r\n      handleIndexChange(nextIndex);\r\n    }\r\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\r\n\r\n  const previous = useCallback(() => {\r\n    const prevIndex =\r\n      currentTextIndex === 0\r\n        ? loop\r\n          ? texts.length - 1\r\n          : currentTextIndex\r\n        : currentTextIndex - 1;\r\n    if (prevIndex !== currentTextIndex) {\r\n      handleIndexChange(prevIndex);\r\n    }\r\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\r\n\r\n  const jumpTo = useCallback(\r\n    (index) => {\r\n      const validIndex = Math.max(0, Math.min(index, texts.length - 1));\r\n      if (validIndex !== currentTextIndex) {\r\n        handleIndexChange(validIndex);\r\n      }\r\n    },\r\n    [texts.length, currentTextIndex, handleIndexChange]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    if (currentTextIndex !== 0) {\r\n      handleIndexChange(0);\r\n    }\r\n  }, [currentTextIndex, handleIndexChange]);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => ({\r\n      next,\r\n      previous,\r\n      jumpTo,\r\n      reset,\r\n    }),\r\n    [next, previous, jumpTo, reset]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!auto) return;\r\n    const intervalId = setInterval(next, rotationInterval);\r\n    return () => clearInterval(intervalId);\r\n  }, [next, rotationInterval, auto]);\r\n\r\n  return (\r\n    <motion.span\r\n      className={cn(\r\n        \"flex flex-wrap whitespace-pre-wrap relative\",\r\n        mainClassName\r\n      )}\r\n      {...rest}\r\n      layout\r\n      transition={transition}\r\n    >\r\n      <span className=\"sr-only\">{texts[currentTextIndex]}</span>\r\n      <AnimatePresence mode={animatePresenceMode} initial={animatePresenceInitial}>\r\n        <motion.div\r\n          key={currentTextIndex}\r\n          className={cn(\r\n            splitBy === \"lines\"\r\n              ? \"flex flex-col w-full\"\r\n              : \"flex flex-wrap whitespace-pre-wrap relative\"\r\n          )}\r\n          layout\r\n          aria-hidden=\"true\"\r\n        >\r\n          {elements.map((wordObj, wordIndex, array) => {\r\n            const previousCharsCount = array\r\n              .slice(0, wordIndex)\r\n              .reduce((sum, word) => sum + word.characters.length, 0);\r\n            return (\r\n              <span key={wordIndex} className={cn(\"inline-flex\", splitLevelClassName)}>\r\n                {wordObj.characters.map((char, charIndex) => (\r\n                  <motion.span\r\n                    key={charIndex}\r\n                    initial={initial}\r\n                    animate={animate}\r\n                    exit={exit}\r\n                    transition={{\r\n                      ...transition,\r\n                      delay: getStaggerDelay(\r\n                        previousCharsCount + charIndex,\r\n                        array.reduce((sum, word) => sum + word.characters.length, 0)\r\n                      ),\r\n                    }}\r\n                    className={cn(\"inline-block\", elementLevelClassName)}\r\n                  >\r\n                    {char}\r\n                  </motion.span>\r\n                ))}\r\n                {wordObj.needsSpace && <span className=\"whitespace-pre\"> </span>}\r\n              </span>\r\n            );\r\n          })}\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </motion.span>\r\n  );\r\n});\r\n\r\nRotatingText.displayName = \"RotatingText\";\r\nexport default RotatingText; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}